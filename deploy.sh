#!/bin/bash

# Script de deploy da Scanitz API
# Automatiza o processo de build e deploy usando Docker

set -e

echo "üöÄ Iniciando deploy da Scanitz API..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para logs
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se .env existe
if [ ! -f ".env" ]; then
    log_error "Arquivo .env n√£o encontrado!"
    log_info "Copie o arquivo .env.template para .env e configure suas vari√°veis"
    cp .env.template .env
    log_warn "Arquivo .env criado a partir do template. Configure suas vari√°veis antes de continuar."
    exit 1
fi

# Carregar vari√°veis do .env
export $(grep -v '^#' .env | xargs)

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    log_error "Docker n√£o est√° rodando! Inicie o Docker e tente novamente."
    exit 1
fi

# Parar containers existentes
log_info "Parando containers existentes..."
docker-compose down --remove-orphans || true

# Limpar imagens antigas (opcional)
read -p "Deseja remover imagens antigas para economizar espa√ßo? [y/N] " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "Removendo imagens antigas..."
    docker system prune -f
    docker image prune -f
fi

# Build da nova imagem
log_info "Construindo nova imagem da API..."
docker-compose build --no-cache scanitz-api

# Subir os servi√ßos
log_info "Iniciando servi√ßos..."
docker-compose up -d scanitz-api

# Aguardar API ficar dispon√≠vel
log_info "Aguardando API ficar dispon√≠vel..."
for i in {1..30}; do
    if curl -f -s "http://localhost:${PORT:-3000}/health" > /dev/null; then
        log_info "‚úÖ API est√° respondendo!"
        break
    fi
    echo -n "."
    sleep 2
done

# Verificar se API est√° healthy
HEALTH_CHECK=$(curl -s "http://localhost:${PORT:-3000}/health" | grep -o '"status":"healthy"' || echo "")
if [ -n "$HEALTH_CHECK" ]; then
    log_info "‚úÖ Health check passou!"
else
    log_error "‚ùå Health check falhou!"
    log_info "Verificando logs..."
    docker-compose logs --tail=50 scanitz-api
    exit 1
fi

# Mostrar status dos containers
log_info "Status dos containers:"
docker-compose ps

# Mostrar informa√ß√µes de acesso
echo ""
log_info "üéâ Deploy conclu√≠do com sucesso!"
echo ""
echo "üì° API dispon√≠vel em: http://localhost:${PORT:-3000}"
echo "üìö Documenta√ß√£o: http://localhost:${PORT:-3000}/api/v1/docs"
echo "‚ù§Ô∏è  Health Check: http://localhost:${PORT:-3000}/health"
echo ""
echo "üìã Comandos √∫teis:"
echo "  - Ver logs: docker-compose logs -f scanitz-api"
echo "  - Parar API: docker-compose down"
echo "  - Restart: docker-compose restart scanitz-api"
echo ""

# Opcional: rodar testes b√°sicos
read -p "Deseja executar testes b√°sicos da API? [Y/n] " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Nn]$ ]]; then
    log_info "Executando testes b√°sicos..."
    
    # Teste do endpoint raiz
    if curl -f -s "http://localhost:${PORT:-3000}/" > /dev/null; then
        log_info "‚úÖ Endpoint raiz: OK"
    else
        log_error "‚ùå Endpoint raiz: FALHOU"
    fi
    
    # Teste do Swagger
    if curl -f -s "http://localhost:${PORT:-3000}/api/v1/docs" > /dev/null; then
        log_info "‚úÖ Documenta√ß√£o Swagger: OK"
    else
        log_error "‚ùå Documenta√ß√£o Swagger: FALHOU"
    fi
    
    # Teste de um endpoint da API
    if curl -f -s "http://localhost:${PORT:-3000}/api/v1/complaints/positions" > /dev/null; then
        log_info "‚úÖ Endpoint de den√∫ncias: OK"
    else
        log_warn "‚ö†Ô∏è  Endpoint de den√∫ncias: FALHOU (pode ser normal se n√£o houver dados)"
    fi
    
    echo ""
    log_info "Testes conclu√≠dos!"
fi

log_info "üéØ Deploy finalizado! A API Scanitz est√° pronta para uso."
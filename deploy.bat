@echo off
REM Script de deploy da Scanitz API para Windows
REM Automatiza o processo de build e deploy usando Docker

echo üöÄ Iniciando deploy da Scanitz API...

REM Verificar se .env existe
if not exist ".env" (
    echo [ERROR] Arquivo .env n√£o encontrado!
    echo [INFO] Copiando template para .env...
    copy .env.template .env
    echo [WARN] Configure suas vari√°veis no arquivo .env antes de continuar.
    pause
    exit /b 1
)

REM Verificar se Docker est√° rodando
docker info >nul 2>&1
if errorlevel 1 (
    echo [ERROR] Docker n√£o est√° rodando! Inicie o Docker e tente novamente.
    pause
    exit /b 1
)

REM Parar containers existentes
echo [INFO] Parando containers existentes...
docker-compose down --remove-orphans

REM Limpar imagens antigas (opcional)
set /p clean="Deseja remover imagens antigas para economizar espa√ßo? [y/N]: "
if /i "%clean%"=="y" (
    echo [INFO] Removendo imagens antigas...
    docker system prune -f
    docker image prune -f
)

REM Build da nova imagem
echo [INFO] Construindo nova imagem da API...
docker-compose build --no-cache scanitz-api

REM Subir os servi√ßos
echo [INFO] Iniciando servi√ßos...
docker-compose up -d scanitz-api

REM Aguardar API ficar dispon√≠vel
echo [INFO] Aguardando API ficar dispon√≠vel...
timeout /t 10 /nobreak >nul

REM Verificar se API est√° respondendo
for /l %%i in (1,1,15) do (
    curl -f -s "http://localhost:3000/health" >nul 2>&1
    if not errorlevel 1 (
        echo [INFO] ‚úÖ API est√° respondendo!
        goto :healthy
    )
    echo Tentativa %%i/15...
    timeout /t 2 /nobreak >nul
)

echo [ERROR] ‚ùå API n√£o respondeu ap√≥s 30 segundos
echo [INFO] Verificando logs...
docker-compose logs --tail=50 scanitz-api
pause
exit /b 1

:healthy
REM Mostrar status dos containers
echo [INFO] Status dos containers:
docker-compose ps

REM Mostrar informa√ß√µes de acesso
echo.
echo üéâ Deploy conclu√≠do com sucesso!
echo.
echo üì° API dispon√≠vel em: http://localhost:3000
echo üìö Documenta√ß√£o: http://localhost:3000/api/v1/docs
echo ‚ù§Ô∏è  Health Check: http://localhost:3000/health
echo.
echo üìã Comandos √∫teis:
echo   - Ver logs: docker-compose logs -f scanitz-api
echo   - Parar API: docker-compose down
echo   - Restart: docker-compose restart scanitz-api
echo.

REM Opcional: rodar testes b√°sicos
set /p test="Deseja executar testes b√°sicos da API? [Y/n]: "
if /i not "%test%"=="n" (
    echo [INFO] Executando testes b√°sicos...
    
    REM Teste do endpoint raiz
    curl -f -s "http://localhost:3000/" >nul 2>&1
    if not errorlevel 1 (
        echo [INFO] ‚úÖ Endpoint raiz: OK
    ) else (
        echo [ERROR] ‚ùå Endpoint raiz: FALHOU
    )
    
    REM Teste do Swagger
    curl -f -s "http://localhost:3000/api/v1/docs" >nul 2>&1
    if not errorlevel 1 (
        echo [INFO] ‚úÖ Documenta√ß√£o Swagger: OK
    ) else (
        echo [ERROR] ‚ùå Documenta√ß√£o Swagger: FALHOU
    )
    
    REM Teste de um endpoint da API
    curl -f -s "http://localhost:3000/api/v1/complaints/positions" >nul 2>&1
    if not errorlevel 1 (
        echo [INFO] ‚úÖ Endpoint de den√∫ncias: OK
    ) else (
        echo [WARN] ‚ö†Ô∏è  Endpoint de den√∫ncias: FALHOU ^(pode ser normal se n√£o houver dados^)
    )
    
    echo.
    echo [INFO] Testes conclu√≠dos!
)

echo üéØ Deploy finalizado! A API Scanitz est√° pronta para uso.
pause